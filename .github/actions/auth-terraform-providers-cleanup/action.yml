name: Cleanup Authenticated Terraform Providers
description: Cleans up authenticated Terraform providers

inputs:
  aws-region:
    description: AWS region
    required: false
    type: string
    default: us-east-1
  providers:
    description: "Comma separated list of providers to authenticate"
    required: false
  service-name:
    description: The service name
    required: true

runs:
  using: composite
  steps:
    - name: Assume AWS Role in Root Account Using OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: arn:aws:iam::637192944017:role/${{ inputs.service-name }}__oidc
        role-skip-session-tagging: true
    - name: Cleanup Grafana Provider
      if: contains(inputs.providers, 'grafana')
      shell: bash
      env:
        AWS_REGION: ${{ inputs.aws-region }}
      run: |
        # Assume the TerraformDeployer role for Grafana operations
        echo "Assuming TerraformDeployer role..."
        CREDS=$(aws sts assume-role \
          --role-arn "arn:aws:iam::713881803394:role/TerraformDeployer" \
          --role-session-name "terraform-grafana" \
          --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
          --output text)

        if [ $? -ne 0 ]; then
            echo "Failed to assume TerraformDeployer role"
            exit 1
        fi

        if [ -z "$TF_VAR_grafana_workspace_id" ]; then
            echo "TF_VAR_grafana_workspace_id is not set"
            exit 1
        fi

        if [ -z "$TF_VAR_grafana_service_account_id" ]; then
            echo "TF_VAR_grafana_service_account_id is not set"
            exit 1
        fi

        # Set temporary credentials
        AWS_ACCESS_KEY_ID=$(echo "$CREDS" | awk '{print $1}')
        AWS_SECRET_ACCESS_KEY=$(echo "$CREDS" | awk '{print $2}')
        AWS_SESSION_TOKEN=$(echo "$CREDS" | awk '{print $3}')

        echo "Cleaning up Grafana service account token..."
        AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" AWS_SESSION_TOKEN="$AWS_SESSION_TOKEN" \
        aws grafana delete-workspace-service-account-token \
            --workspace-id "$TF_VAR_grafana_workspace_id" \
            --service-account-id "$TF_VAR_grafana_service_account_id" \
            --token-id "$GRAFANA_TOKEN_ID" \
            --region "$AWS_REGION" | cat
        
        if [ $? -eq 0 ]; then
            echo "Successfully deleted Grafana service account token"
        else
            echo "Failed to delete Grafana service account token"
        fi
