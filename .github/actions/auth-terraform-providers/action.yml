name: Authenticate Terraform Providers
description: Authenticates Terraform providers

inputs:
  aws-region:
    description: AWS region
    required: false
    type: string
    default: us-east-1
  providers:
    description: "Comma separated list of providers to authenticate"
    required: false
  service-name:
    description: The service name
    required: true

runs:
  using: composite
  steps:
    - name: Assume AWS Role in Root Account Using OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: arn:aws:iam::637192944017:role/${{ inputs.service-name }}__oidc
        role-skip-session-tagging: true
    - name: Set Variables From SSM
      shell: bash
      env:
        AWS_REGION: ${{ inputs.aws-region }}
      run: |
        echo "Fetching SSM parameters..."
        PARAMS=$(aws ssm get-parameters-by-path \
          --path "/terraform/" \
          --recursive \
          --with-decryption \
          --region "$AWS_REGION" \
          --query 'Parameters[*].[Name,Value]' \
          --output text)

        while IFS=$'\t' read -r name value; do
          # Convert SSM path to environment variable name (lowercase)
          var_name=$(echo "$name" | sed 's|/terraform/||' | tr '/' '_')
          
          # Add TF_VAR_ prefix for Terraform variables
          var_name="TF_VAR_${var_name}"
          
          echo "Variable $var_name set."
          echo "::add-mask::$value"
          echo "$var_name=$value" >> "$GITHUB_ENV"
        done <<< "$PARAMS"

    - name: Authenticate Grafana Provider
      if: contains(inputs.providers, 'grafana')
      shell: bash
      env:
        AWS_REGION: ${{ inputs.aws-region }}
      run: |
        TIMESTAMP=$(date +%s)

        # Assume the TerraformDeployer role for Grafana operations
        echo "Assuming TerraformDeployer role..."
        CREDS=$(aws sts assume-role \
          --role-arn "arn:aws:iam::713881803394:role/TerraformDeployer" \
          --role-session-name "terraform-grafana" \
          --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
          --output text)

        if [ $? -ne 0 ]; then
            echo "Failed to assume TerraformDeployer role"
            exit 1
        fi

        if [ -z "$TF_VAR_grafana_workspace_id" ]; then
            echo "TF_VAR_grafana_workspace_id is not set"
            exit 1
        fi

        if [ -z "$TF_VAR_grafana_service_account_id" ]; then
            echo "TF_VAR_grafana_service_account_id is not set"
            exit 1
        fi

        # Set temporary credentials
        AWS_ACCESS_KEY_ID=$(echo "$CREDS" | awk '{print $1}')
        AWS_SECRET_ACCESS_KEY=$(echo "$CREDS" | awk '{print $2}')
        AWS_SESSION_TOKEN=$(echo "$CREDS" | awk '{print $3}')

        # Create service account token
        echo "Creating Grafana service account token..."
        TOKEN_RESPONSE=$(AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" AWS_SESSION_TOKEN="$AWS_SESSION_TOKEN" \
        aws grafana create-workspace-service-account-token \
          --workspace-id "$TF_VAR_grafana_workspace_id" \
          --service-account-id "$TF_VAR_grafana_service_account_id" \
          --name "terraform-token-${TIMESTAMP}" \
          --seconds-to-live 3600 \
          --region "$AWS_REGION")
        if [ $? -ne 0 ]; then
            echo "Failed to create Grafana service account token"
            exit 1
        fi

        # Extract token and token ID from response
        TF_VAR_grafana_auth=$(echo "$TOKEN_RESPONSE" | jq -r '.serviceAccountToken.key')
        GRAFANA_TOKEN_ID=$(echo "$TOKEN_RESPONSE" | jq -r '.serviceAccountToken.id')

        if [ -z "$TF_VAR_grafana_auth" ]; then
            echo "Failed to extract Grafana service account token"
            exit 1
        fi

        echo "Successfully created new Grafana service account token"
        echo "::add-mask::$TF_VAR_grafana_auth"
        echo "TF_VAR_grafana_auth=$TF_VAR_grafana_auth" >> "$GITHUB_ENV"
        
        # Make GRAFANA_TOKEN_ID available to other steps
        echo "GRAFANA_TOKEN_ID=$GRAFANA_TOKEN_ID" >> $GITHUB_ENV
