name: Terraform Actions

inputs:
  aws-account-id:
    required: true
  aws-region:
    required: false
    default: us-east-1
  backend-s3-key:
    required: false
    default: ""
  dir:
    required: false
    default: tf
  env:
    required: true
  github-token-terraform:
    required: false
  service-name:
    required: true

runs:
  using: composite
  steps:
    - name: Assume AWS Role in Root Account Using OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::637192944017:role/${{ inputs.service-name }}__oidc
        role-skip-session-tagging: true

    - run: |
        if [ -n "${{ inputs.github-token-terraform }}" ]; then
          echo "Configuring GitHub token for Terraform"
          echo "machine github.com login username password ${{ inputs.github-token-terraform }}" > ~/.netrc
          git config --global url."https://github.com/".insteadOf "git://github.com/"
          git config --global advice.detachedHead false
        fi
      shell: bash
      
    - uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: ~1.10.0
    
    - run: |
        cd ${{ inputs.dir }}
        backend_key=${{ inputs.backend-s3-key }}
        if [ -z "$backend_key" ]; then
          backend_key="aws/app/${{ inputs.env }}/${{ inputs.service-name }}/infrastructure.tfstate"
        fi
        tofu init -reconfigure \
          -backend-config="bucket=fgr-terraform-state" \
          -backend-config="key=$backend_key" \
          -backend-config="region=${{ inputs.aws-region }}" \
          -backend-config=use_lockfile=true \
          -lock-timeout=60s
      shell: bash

    - name: Force Unlock on Cancellation
      if: cancelled()
      run: |
        cd ${{ inputs.dir }}
        echo "Checking for stale lock on cancelled job..."
        # Run a command that tries to acquire a lock. We expect this to fail if a lock exists.
        # We capture stderr and ignore the exit code.
        plan_output=$(tofu plan -input=false -no-color -refresh=false -parallelism=1 2>&1) || true
        # Check if the error is about a state lock
        if echo "$plan_output" | grep -q "Error acquiring the state lock"; then
          echo "A stale lock was found. Attempting to extract lock ID."
          # Extract the lock ID from the error message.
          LOCK_ID=$(echo "$plan_output" | sed -n 's/^  ID:[[:space:]]*\\(.*\\)$/\\1/p')
          if [ -n "$LOCK_ID" ]; then
            echo "Extracted lock ID: $LOCK_ID"
            echo "Forcibly unlocking the state..."
            tofu force-unlock -force "$LOCK_ID"
          else
            echo "Failed to extract lock ID from the error message."
            echo "Full output from tofu plan:"
            echo "$plan_output"
            # We exit here because we can't proceed.
            exit 1
          fi
        else
          echo "No stale lock found."
        fi
      shell: bash
      env:
        AWS_REGION: ${{ inputs.aws-region }}
    
