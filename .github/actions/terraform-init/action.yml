name: Terraform Actions

inputs:
  aws-account-id:
    required: true
  aws-region:
    required: false
    default: us-east-1
  backend-s3-key:
    required: false
    default: ""
  dir:
    required: false
    default: tf
  env:
    required: true
  github-token-terraform:
    required: false
  service-name:
    required: true

runs:
  using: composite
  steps:
    - name: Assume AWS Role in Root Account Using OIDC
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: us-east-1
        role-to-assume: arn:aws:iam::637192944017:role/${{ inputs.service-name }}__oidc
        role-skip-session-tagging: true

    - run: |
        if [ -n "${{ inputs.github-token-terraform }}" ]; then
          echo "Configuring GitHub token for Terraform"
          echo "machine github.com login username password ${{ inputs.github-token-terraform }}" > ~/.netrc
          git config --global url."https://github.com/".insteadOf "git://github.com/"
          git config --global advice.detachedHead false
        fi
      shell: bash
      
    - uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: 1.10.0
    
    - run: |
        cd ${{ inputs.dir }}
        backend_key=${{ inputs.backend-s3-key }}
        if [ -z "$backend_key" ]; then
          backend_key="aws/app/${{ inputs.env }}/${{ inputs.service-name }}/infrastructure.tfstate"
        fi
        tofu init -reconfigure \
          -backend-config="bucket=fgr-terraform-state" \
          -backend-config="dynamodb_table=fgr-terraform-state-locks" \
          -backend-config="key=$backend_key" \
          -backend-config="region=${{ inputs.aws-region }}" \
          -lock-timeout=60s
      shell: bash

    - name: Force Unlock on Cancellation
      if: cancelled()
      run: |
        cd ${{ inputs.dir }}
        backend_key=${{ inputs.backend-s3-key }}
        if [ -z "$backend_key" ]; then
          backend_key="aws/app/${{ inputs.env }}/${{ inputs.service-name }}/infrastructure.tfstate"
        fi
        # Get the lock ID from DynamoDB
        LOCK_ID=$(aws dynamodb query \
          --table-name fgr-terraform-state-locks \
          --key-condition-expression "LockID = :lockid" \
          --expression-attribute-values "{\":lockid\":{\"S\":\"fgr-terraform-state/$backend_key\"}}" \
          --query "Items[0].LockID.S" \
          --output text)
        
        if [ ! -z "$LOCK_ID" ]; then
          echo "Force unlocking state..."
          terraform force-unlock -force "$LOCK_ID"
        fi
      shell: bash
      env:
        AWS_REGION: ${{ inputs.aws-region }}
    
