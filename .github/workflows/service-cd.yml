name: Production Deployment
on: 
  workflow_call:
    inputs:
      aws-region:
        description: "AWS region"
        required: false
        type: string
        default: "us-east-1"
      db-tunnel-mapping:
        description: "DB tunnel mapping"
        required: false
        type: string
        default: ""
      deploy-serverless:
        description: "Deploy Lambda with Serverless"
        required: false
        type: boolean
        default: false
      service-name:
        description: "Service name"
        required: true
        type: string
      sha:
        description: "Release commit SHA"
        required: true
        type: string
    secrets:
      BUDDY_TRIGGER_URL:
        description: "Buddy trigger URL"

permissions:
  # Needed to checkout repository code, read repository contents and create tags
  contents: write
  # Required for OIDC authentication with AWS
  id-token: write
  # Allows reading from GitHub container registry (ghcr.io)
  packages: read

jobs:
  terraform-deploy:
    runs-on: "blacksmith-4vcpu-ubuntu-2204"
    env:
      AWS_REGION: ${{ inputs.aws-region }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}

      - name: Terraform Init
        uses: FigurePOS/github-actions/.github/actions/terraform-init@v1
        with:
          db-tunnel-mapping: ${{ inputs.db-tunnel-mapping }}
          env: production
          service-name: ${{ inputs.service-name }}

      - name: Terraform Apply
        uses: FigurePOS/github-actions/.github/actions/terraform-apply@v1
        with:
          aws-account-id: '682919404744'
          env: production
          service-name: ${{ inputs.service-name }}

      - name: Create a Release Tag and Update the Production Tag
        uses: actions/github-script@v7
        with:
          retries: 3
          script: |
            const date = new Date();
            const tag = date.toISOString().replace(/[-:Z]/g, "").replace(/[T\.]/g, "-");
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/release-${tag}`,
              sha: "${{ inputs.sha }}"
            })
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: "tags/production"
              });
              // If the tag exists, update it
              await github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: "tags/production",
                sha: "${{ inputs.sha }}",
                force: true
              });
            } catch (error) {
              if (error.status === 422) {
              // If the tag does not exist, create it
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: "refs/tags/production",
                sha: "${{ inputs.sha }}"
              });
              } else {
                throw error;
              }
            }

      - name: Send Slack Notification About Failure
        if: failure()
        uses: FigurePOS/github-actions/.github/actions/buddy-notify-fail-service@v1
        with:
          job-name: "terraform-deploy-prod"
          service-name: ${{ inputs.service-name }}
          trigger-url: ${{ secrets.BUDDY_TRIGGER_URL }}

  serverless-deploy:
    if: inputs.deploy-serverless
    runs-on: "blacksmith-4vcpu-ubuntu-2204"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.sha }}

      - uses: FigurePOS/github-actions/.github/actions/serverless-deploy@v1
        with:
          aws-account-id: '682919404744'
          env: production
          service-name: ${{ inputs.service-name }}

      - name: Send Slack Notification About Failure
        if: failure()
        uses: FigurePOS/github-actions/.github/actions/buddy-notify-fail-service@v1
        with:
          job-name: "serverless-deploy-prod"
          service-name: ${{ inputs.service-name }}
          trigger-url: ${{ secrets.BUDDY_TRIGGER_URL }}
